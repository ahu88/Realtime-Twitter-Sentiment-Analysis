[{"E:\\Documents\\Side Projects\\tweet-app\\react-client\\src\\index.js":"1","E:\\Documents\\Side Projects\\tweet-app\\react-client\\src\\App.js":"2","E:\\Documents\\Side Projects\\tweet-app\\react-client\\src\\reportWebVitals.js":"3","E:\\Documents\\Side Projects\\tweet-app\\react-client\\src\\utils\\useTweets.js":"4","E:\\Documents\\Side Projects\\tweet-app\\react-client\\src\\utils\\expire.js":"5","E:\\Documents\\Side Projects\\tweet-app-git\\react-client\\src\\index.js":"6","E:\\Documents\\Side Projects\\tweet-app-git\\react-client\\src\\App.js":"7","E:\\Documents\\Side Projects\\tweet-app-git\\react-client\\src\\reportWebVitals.js":"8","E:\\Documents\\Side Projects\\tweet-app-git\\react-client\\src\\utils\\useTweets.js":"9","E:\\Documents\\Side Projects\\tweet-app-git\\react-client\\src\\utils\\expire.js":"10","E:\\Documents\\Side Projects\\tweet-app-git\\react-client\\src\\pages\\index.jsx":"11","E:\\Documents\\Side Projects\\tweet-app-git\\react-client\\src\\pages\\HomePage\\index.jsx":"12","E:\\Documents\\Side Projects\\tweet-app-git\\react-client\\src\\pages\\SentimentPage\\index.jsx":"13","E:\\Documents\\Side Projects\\tweet-app-git\\react-client\\src\\utils\\sentimentAnalysis.js":"14"},{"size":827,"mtime":1630439387191,"results":"15","hashOfConfig":"16"},{"size":295,"mtime":1620522881506,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"16"},{"size":2170,"mtime":1630603318290,"results":"19","hashOfConfig":"16"},{"size":401,"mtime":1630603778165,"results":"20","hashOfConfig":"16"},{"size":1454,"mtime":1630698555391,"results":"21","hashOfConfig":"22"},{"size":371,"mtime":1630612674512,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"22"},{"size":1758,"mtime":1640983960508,"results":"25","hashOfConfig":"22"},{"size":401,"mtime":1630603778165,"results":"26","hashOfConfig":"22"},{"size":86,"mtime":1630612624722,"results":"27","hashOfConfig":"22"},{"size":5097,"mtime":1640983892035,"results":"28","hashOfConfig":"22"},{"size":3977,"mtime":1640984998493,"results":"29","hashOfConfig":"22"},{"size":3902,"mtime":1640985015160,"results":"30","hashOfConfig":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},"11di5hm",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},"1wokwx7",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},"E:\\Documents\\Side Projects\\tweet-app\\react-client\\src\\index.js",["68","69","70"],"import 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <nav class=\"navbar navbar-dark bg-dark\">\n        <div class=\"container\">\n            <a href=\"#\" class=\"navbar-brand\">Real-Time Twitter Stream</a>\n        </div>\n    </nav>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["71","72"],"E:\\Documents\\Side Projects\\tweet-app\\react-client\\src\\App.js",[],"E:\\Documents\\Side Projects\\tweet-app\\react-client\\src\\reportWebVitals.js",[],"E:\\Documents\\Side Projects\\tweet-app\\react-client\\src\\utils\\useTweets.js",["73","74"],"//a custom hook that creates the socket.io-client, exposes a tweet object\r\n//, and whenever a new tweet is received - will add to the array of all tweets\r\nimport { useState, useRef, useEffect } from \"react\";\r\nimport {io} from \"socket.io-client\";\r\nconst ENDPOINT = \"http://localhost:4001/\";\r\n\r\nfunction useTweets() {\r\n    //* with functional components, we use the useState hook to use state variables */\r\n\r\n    //received tweets from server -> is an array\r\n    //tweets is the current state, and setTweets is a function that updates it\r\n    const [tweets, setTweets] = useState([]); //[] is the initial state of tweets\r\n    const socketRef = useRef(); //object returned from useRef will persist for the full lifetime of the component\r\n\r\n    //create WebSocket connection with server\r\n    // const socket = io(ENDPOINT , {\r\n    //     withCredentials: true,\r\n    //     extraHeaders: {\r\n    //         \"my-custom-header\": \"abcd\"\r\n    //     }\r\n    // });\r\n    \r\n\r\n\r\n    //handle tweet events\r\n    useEffect(() => {\r\n        //create WebSocket connection with server\r\n        // const socket = io(ENDPOINT , {\r\n        //     withCredentials: true,\r\n        //     extraHeaders: {\r\n        //         \"my-custom-header\": \"abcd\"\r\n        //     }\r\n        // });\r\n        socketRef.current = io(ENDPOINT)\r\n\r\n        socketRef.current.on(\"tweet\", (tweet) => {\r\n            console.log(tweet)\r\n\r\n            //object that represents the tweet data to display\r\n            const newTweet = {\r\n                id : tweet.data.id,\r\n                text : tweet.data.text,\r\n                username : `@${tweet.includes.users[0].username}`\r\n            }\r\n            \r\n            //////////////////\r\n            if (tweets.length == 5) {\r\n                setTweets([]);\r\n            }\r\n\r\n            //////////////////\r\n\r\n            //add new tweet to array of tweets -> return this array\r\n            setTweets((tweets) => [...tweets, newTweet]);\r\n        });\r\n\r\n        //destroy socket reference when connection is closed\r\n        return () => {\r\n            socketRef.current.disconnect();\r\n        };\r\n    }, []);\r\n\r\n    return tweets;\r\n}\r\n\r\nexport default useTweets;\r\n\r\n","E:\\Documents\\Side Projects\\tweet-app\\react-client\\src\\utils\\expire.js",[],"E:\\Documents\\Side Projects\\tweet-app-git\\react-client\\src\\index.js",["75","76"],"import 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n\n    <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n      <div class=\"container\">\n        <a class=\"navbar-brand\" href=\"/\">Real-Time Twitter Stream</a>\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n          <ul class=\"navbar-nav\">\n            <li class=\"nav-item active\">\n              <a class=\"nav-link\" href=\"/\">Home</a>\n            </li>\n            <li class=\"nav-item\">\n              <a class=\"nav-link\" href=\"/Sentiment\">Sentiment Analysis</a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["77","78"],"E:\\Documents\\Side Projects\\tweet-app-git\\react-client\\src\\App.js",[],"E:\\Documents\\Side Projects\\tweet-app-git\\react-client\\src\\reportWebVitals.js",[],"E:\\Documents\\Side Projects\\tweet-app-git\\react-client\\src\\utils\\useTweets.js",["79","80"],"//a custom hook that creates the socket.io-client, exposes a tweet object\r\n//, and whenever a new tweet is received - will add to the array of all tweets\r\nimport { useState, useRef, useEffect } from \"react\";\r\nimport {io} from \"socket.io-client\";\r\nimport {tweetSentiment} from '../utils/sentimentAnalysis'\r\n\r\nconst ENDPOINT = \"http://localhost:4001/\";\r\n\r\nfunction useTweets() {\r\n  //* with functional components, we use the useState hook to use state variables */\r\n\r\n  //received tweets from server -> is an array\r\n  //tweets is the current state, and setTweets is a function that updates it\r\n  const [tweets, setTweets] = useState([]); //[] is the initial state of tweets\r\n  const socketRef = useRef(); //object returned from useRef will persist for the full lifetime of the component\r\n\r\n  //handle tweet events\r\n  //*** THIS IS LIKE THE COMPONENTDIDMOUNT FUNCTION -> RUN ON FIRST RENDER (not subsequent updates since passed in [] as second prop) */\r\n  useEffect(async () => {\r\n    socketRef.current = io(ENDPOINT)\r\n    \r\n    socketRef.current.on(\"tweet\", async (tweet) => {\r\n      if (tweet.data != undefined) {\r\n        //object that represents the tweet data to display\r\n        const newTweet = {\r\n          id : tweet.data.id,\r\n          text : tweet.data.text,\r\n          username : `@${tweet.includes.users[0].username}`,\r\n          sentiment: await tweetSentiment(tweet.data)\r\n        }\r\n        console.log(newTweet);\r\n\r\n        //add new tweet to array of tweets -> return this array\r\n        setTweets((tweets) => [...tweets, newTweet]);\r\n      }\r\n    });\r\n\r\n    //destroy socket reference when connection is closed\r\n    return () => {\r\n      socketRef.current.disconnect();\r\n    };\r\n  }, []);\r\n  return tweets;\r\n}\r\n\r\nexport default useTweets;\r\n\r\n","E:\\Documents\\Side Projects\\tweet-app-git\\react-client\\src\\utils\\expire.js",[],"E:\\Documents\\Side Projects\\tweet-app-git\\react-client\\src\\pages\\index.jsx",[],"E:\\Documents\\Side Projects\\tweet-app-git\\react-client\\src\\pages\\HomePage\\index.jsx",["81","82","83","84"],"import React from \"react\";\r\nimport useTweets from \"../../utils/useTweets\"\r\nimport Expire from \"../../utils/expire\"\r\nimport { useState, useRef, useEffect } from \"react\";\r\nimport axios from 'axios'; //to make api calls\r\nimport { Form, FormGroup, Button } from \"react-bootstrap\"\r\nimport '../../App.css' //css stylesheet\r\n\r\nexport const HomePage = () => {\r\n\tconst [rules, setRules] = useState(\"\"); //state var to set the rules for tweet stream\r\n\tconst [recentSearches, setRecentSearches] = useState([]); //state array to hold recently searched rules -> retrieved from mongoDB\r\n\tconst tweets = useTweets() // useTweets() is a hook that will update the 'tweets' array with new tweets as soon as it is received from the socket\r\n\r\n\t//similar to componentDidMount and componentDidUpdate -> run at mounted/first render + all subsequent updates (only updates at mounted if pass in [] as parameter) \r\n  //when calling setState inside useEffect, make sure to pass in [] as 2nd param, else there will be an infinite loop (setState causes rerender -> call useEffect -> repeat)\r\n\tuseEffect(() => {\r\n    //GET request to get stored recent searches\r\n    axios.get(\"/getRecentSearches\")\r\n    .then((response) => {\r\n      console.log(response.data);\r\n      //need to format the response.data, as it is an array of obj, not array of value strings\r\n      let formattedRecentSearches = response.data.map((item) => {\r\n        return item['value'];\r\n      })\r\n      console.log(formattedRecentSearches);\r\n      setRecentSearches(formattedRecentSearches);\r\n    })\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err); //err.message\r\n\t\t});\r\n    \r\n    console.log(\"recentSearches: \" + recentSearches);\r\n\t}, []);\r\n\r\n\t//function to handle form submission event -> send post request to backend\r\n\tconst handleSubmit = (evt) => {\r\n\t\tevt.preventDefault();\r\n\t\talert(`Submitting Rule: ${rules}`)\r\n    \r\n    //send rule to backend -> start tweet stream\r\n\t\taxios.post(\"/\", {\r\n\t\t\trules: rules\r\n\t\t}).then()\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(\"error\");\r\n\t\t});\r\n\r\n    // update the current recentSearches state arr \r\n    setRecentSearches(prevArray => [...prevArray, rules]);\r\n    console.log(rules);\r\n    console.log(recentSearches);\r\n\r\n    //TODO: only update if unique?\r\n    //TODO: instead of recentSearches being an array of strings, make it an array of obj {id, value}\r\n\r\n    //POST request to update the mongoDB for recent searches\r\n    axios.post(\"/addRecentSearch\", {\r\n\t\t\tvalue: rules\r\n\t\t})\r\n    .then((response) => {\r\n      console.log(response.data);\r\n\r\n      // update the current recentSearches state arr \r\n      setRecentSearches(prevArray => [...prevArray, rules]);\r\n      console.log(rules);\r\n      console.log(recentSearches);\r\n    })\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(\"error\");\r\n\t\t});\r\n\t}\r\n\r\n  //function to delete selected recent search\r\n  const deleteRecentSearch = (e) => {\r\n\r\n    console.log(tweets);\r\n\r\n    e.preventDefault();\r\n    console.log(\"deleteRecentSearch\")\r\n    console.log(e.target.value);\r\n\r\n    axios.post(\"/deleteRecentSearch\", {\r\n\t\t\tvalue: e.target.value\r\n\t\t})\r\n    .then((response) => {\r\n      console.log(response.data);\r\n\r\n      //remove from recentSearches state array too\r\n      setRecentSearches(recentSearches.filter(item => item !== e.target.value))\r\n    })\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(\"error\");\r\n\t\t});\r\n\r\n  }\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div class=\"container\">\r\n\t\t\t\t{/* form for user inputted rule -> sent to backend API*/}\r\n\t\t\t\t<form class=\"rules-form\" onSubmit={handleSubmit}>  {/* when onSubmit event happens, call the handleSubmit function */}\r\n\t\t\t\t\t<h1 class=\"display-6\">Real-Time Twitter Stream</h1>\r\n\t\t\t\t\t<Form.Group className=\"mb-3\">\r\n\t\t\t\t\t\t<Form.Label>Keyword</Form.Label>\r\n\t\t\t\t\t\t<Form.Control value={rules} onChange={e => setRules(e.target.value)} placeholder=\"Enter keyword to search for\" />\r\n\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t<Button variant=\"primary\" type=\"submit\">\r\n\t\t\t\t\t\tSubmit\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</form>\r\n\r\n        {/* display recently searched */}\r\n        <h5 class=\"mb-3\">Recent Searches:</h5>\r\n        <div class=\"recentContainer\">\r\n          {recentSearches.map((obj, index) => (\r\n            // <p key={obj} class=\"recentTag\">{obj}</p>\r\n            <button onClick={deleteRecentSearch} value={obj} key={index} class=\"recentTag\">{obj}</button>\r\n          ))}\r\n        </div>\r\n\r\n\t\t\t\t{/* print out list of tweets in real-time as they are updated by useTweets hook */}\r\n\t\t\t\t<div id=\"tweetStream\">\r\n\t\t\t\t\t{tweets.map((tweet) => (\r\n\t\t\t\t\t\t<Expire delay=\"1000000\"> {/* tweets disappear after 5 seconds */}\r\n\t\t\t\t\t\t\t<div class=\"card my-4\">\r\n\t\t\t\t\t\t\t\t<div class=\"card-body\">\r\n\t\t\t\t\t\t\t\t\t<h5 class=\"card-title\">{tweet.text}</h5>\r\n                  <h6 class=\"card-subtitle mb-2 text-muted\">{tweet.sentiment.sentiment}: {tweet.sentiment.score}</h6>\r\n\t\t\t\t\t\t\t\t\t<h6 class=\"card-subtitle mb-2 text-muted\">{tweet.username}</h6>\r\n\r\n\t\t\t\t\t\t\t\t\t<a class=\"btn btn-primary mt-3\" href={\"https://twitter.com/\" + tweet.username + \"/status/\" + tweet.id} target=\"_blank\">\r\n\t\t\t\t\t\t\t\t\t\tGo To Tweet\r\n\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</Expire>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n","E:\\Documents\\Side Projects\\tweet-app-git\\react-client\\src\\pages\\SentimentPage\\index.jsx",["85","86","87","88"],"import React from \"react\";\r\nimport { useState, useRef, useEffect } from \"react\";\r\nimport axios from 'axios'; //to make api calls\r\nimport { Form, FormGroup, Button } from \"react-bootstrap\"\r\nimport '../../App.css'\r\nimport {tweetSentiment} from '../../utils/sentimentAnalysis'\r\n\r\nexport const SentimentPage = () => {\r\n  const [query, setQuery] = useState(\"\"); //state var to hold user inputted query to send to backend\r\n  const [tweets, setTweets] = useState([]); //state array to hold 20 tweets returned by post request\r\n  const [twitterData, setTwitterData] = useState([]); //state array to hold sentiment analysis data on 20 tweets\r\n      \r\n  //urls for pre-trained sentiment model\r\n  const urls = {\r\n    model: 'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/model.json',\r\n    metadata: 'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/metadata.json'\r\n  };\r\n\r\n  //function to handle form submission event -> send post request to backend\r\n\tconst handleSubmit = async (evt) => {\r\n    evt.preventDefault();\r\n\t\talert(`Submitting Query: ${query}`)\r\n\r\n    setTwitterData([]); //clear twitterData array\r\n    \r\n    //THIS IS A PROMISE. THE AXIOS.POST OR GET RETURNS A PROMISE, THEN .THEN() HAS THE CALLBACK FUNCTION TO RUN, AND .CATCH IS FOR ERRORS\r\n\t\taxios.post('/sentiment', {\r\n\t\t\tquery: query\r\n\t\t})\r\n    //response is array of tweets from Twitter API\r\n    .then(async function(response){\r\n      //https://stackoverflow.com/questions/54069253/usestate-set-method-not-reflecting-change-immediately **interesting issue...\r\n      console.log(response.data);\r\n      //*this will update tweets for the NEXT RENDER, state values are used by functions based on their CURRENT CLOSURES, state updates will reflect in the next re-render*/\r\n      setTweets(response.data); //set tweets state var to the arr of 20 tweets returned by this request\r\n      console.log(tweets);\r\n\r\n      /* NOTE THAT THE ABOVE TWO CONSOLE.LOGS ARE DIFFERENT, tweets is updated on the NEXT render */\r\n      /* so in order for the twitter sentiment function to work properly (instead of being one render behind, i.e. the first time the array is empty, second time is the first array, ...) */\r\n      /* so, pass in response.data to twitterSentiment instead of tweets*/\r\n\r\n      const twitter_data = [];\r\n      await response.data.forEach(async (tweet, i) => {\r\n        let tweet_data = await tweetSentiment(tweet);\r\n        twitter_data.push(tweet_data);\r\n        setTwitterData(twitterData => [...twitterData, tweet_data]);\r\n      });\r\n    })\r\n    .catch(function(err){\r\n\t\t\tconsole.log(\"error\");\r\n\t\t});\r\n\t}\r\n\r\n  return (\r\n    <div>\r\n      <div class=\"container\">\r\n        {/* form for user inputted hashtag -> do sentiment analysis on this tag*/}\r\n\t\t\t\t<form class=\"rules-form\" onSubmit={handleSubmit}>  {/* when onSubmit event happens, call the handleSubmit function */}\r\n          <h1 class=\"display-6\">Sentiment Analysis</h1>\r\n\t\t\t\t\t<Form.Group className=\"mb-3\">\r\n\t\t\t\t\t\t<Form.Label>Keyword</Form.Label>\r\n\t\t\t\t\t\t<Form.Control value={query} onChange={e => setQuery(e.target.value)} placeholder=\"Enter hashtag\" />\r\n\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t<Button variant=\"primary\" type=\"submit\">\r\n\t\t\t\t\t\tSubmit\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</form>\r\n\r\n\r\n        {/* print out list of tweets in real-time as they are updated by useTweets hook */}\r\n\t\t\t\t{/* <div id=\"tweetStream\">\r\n\t\t\t\t\t{tweets.map((tweet) => (\r\n            <div class=\"card my-4\">\r\n              <div class=\"card-body\">\r\n                <h5 class=\"card-title\">{tweet.text}</h5>\r\n              </div>\r\n            </div>\r\n\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div> */}\r\n        <div id=\"tweetStream\">\r\n\t\t\t\t\t{twitterData.map((tweet) => (\r\n            <div class=\"card my-4\">\r\n              <div class=\"card-body\">\r\n                <h5 class=\"card-title\">{tweet.tweet}</h5>\r\n\t\t\t\t\t\t\t\t<h6 class=\"card-subtitle mb-2 text-muted\">{tweet.sentiment}: {tweet.score}</h6>\r\n\r\n              </div>\r\n            </div>\r\n\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","E:\\Documents\\Side Projects\\tweet-app-git\\react-client\\src\\utils\\sentimentAnalysis.js",["89","90","91"],"import $ from 'jquery'\r\n\r\nconst tf = require('@tensorflow/tfjs');\r\n\r\nlet model, metadata;\r\n\r\n//urls for pre-trained sentiment model\r\nconst urls = {\r\n  model: 'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/model.json',\r\n  metadata: 'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/metadata.json'\r\n};\r\n\r\nconst SentimentThreshold = {\r\n  Positive: 0.66,\r\n  Neutral: 0.33,\r\n  Negative: 0\r\n}\r\n\r\nconst PAD_INDEX = 0;\r\nconst OOV_INDEX = 2;\r\n\r\n//LOAD SENTIMENT MODEL\r\nasync function loadModel(url) {\r\n  try {\r\n    const model = await tf.loadLayersModel(url);\r\n    return model;\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n \r\nasync function loadMetadata(url) {\r\n  try {\r\n    const metadataJson = await fetch(url);\r\n    const metadata = await metadataJson.json();\r\n    return metadata;\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\n//PERFORM SENTIMENT ANALYSIS ON EACH TWEET\r\nasync function setupSentimentModel(){\r\n  model = await loadModel(urls.model);\r\n  metadata = await loadMetadata(urls.metadata);\r\n\r\n}\r\n\r\n//takes in individual tweet, gets sentiment score, determine if positive, neutral, or negative\r\nasync function processTweetData(tweet) {\r\n  await setupSentimentModel();\r\n    \r\n  let twitterData = {};\r\n\r\n  const tweet_text = tweet.text.replace(/(?:https?|ftp):\\/\\/[\\n\\S]+/g, '');\r\n  const sentiment_score = getSentimentScore(tweet_text);\r\n\r\n  let tweet_sentiment = '';\r\n  if(sentiment_score > SentimentThreshold.Positive){\r\n    tweet_sentiment = 'positive'\r\n  }else if(sentiment_score > SentimentThreshold.Neutral){\r\n    tweet_sentiment = 'neutral'\r\n  }else if(sentiment_score >= SentimentThreshold.Negative){\r\n    tweet_sentiment = 'negative'\r\n  }\r\n  \r\n  //console.log(\"tweet_sentiment: \" + tweet_sentiment);\r\n\r\n  twitterData = {\r\n    sentiment: tweet_sentiment,\r\n    score: sentiment_score.toFixed(4),\r\n    tweet: tweet_text\r\n  };\r\n\r\n  return twitterData;\r\n}\r\n\r\n//gets the sentiment score of a single tweet using model.predict()\r\nfunction getSentimentScore(text) {\r\n  const inputText = text.trim().toLowerCase().replace(/(\\.|\\,|\\!)/g, '').split(' ');\r\n  // Convert the words to a sequence of word indices.\r\n  const sequence = inputText.map(word => {\r\n    let wordIndex = metadata.word_index[word] + metadata.index_from;\r\n    if (wordIndex > metadata.vocabulary_size) {\r\n    wordIndex = OOV_INDEX;\r\n    }\r\n    return wordIndex;\r\n  });\r\n  // Perform truncation and padding.\r\n  const paddedSequence = padSequences([sequence], metadata.max_len);\r\n  const input = tf.tensor2d(paddedSequence, [1, metadata.max_len]);\r\n      \r\n  // ***\r\n  const predictOut = model.predict(input);\r\n  const score = predictOut.dataSync()[0];\r\n  predictOut.dispose();\r\n \r\n  return score;\r\n}\r\n\r\nfunction padSequences(sequences, maxLen, padding = 'pre', truncating = 'pre', value = PAD_INDEX) {\r\n  return sequences.map(seq => {\r\n    if (seq.length > maxLen) {\r\n    if (truncating === 'pre') {\r\n      seq.splice(0, seq.length - maxLen);\r\n    } else {\r\n      seq.splice(maxLen, seq.length - maxLen);\r\n    }\r\n    }\r\n  \r\n    if (seq.length < maxLen) {\r\n    const pad = [];\r\n    for (let i = 0; i < maxLen - seq.length; ++i) {\r\n      pad.push(value);\r\n    }\r\n    if (padding === 'pre') {\r\n      seq = pad.concat(seq);\r\n    } else {\r\n      seq = seq.concat(pad);\r\n    }\r\n    }\r\n  \r\n    return seq;\r\n  });\r\n  }\r\n\r\n\r\n//function to run the sentiment analysis using a single tweet\r\nexport async function tweetSentiment(tweet) {\r\n  let sentiment_data = await processTweetData(tweet);\r\n  return sentiment_data;\r\n}\r\n\r\n\r\n// //export the functions as modules so that they can be reused by other parts of the code (i.e. in index.js)\r\n// module.exports.loadModel = loadModel;\r\n// module.exports.loadMetadata = loadMetadata;\r\n// module.exports.processTwitterData = processTwitterData;\r\n// module.exports.getSentimentScore = getSentimentScore;\r\n// module.exports.twitterSentiment = twitterSentiment;",{"ruleId":"92","severity":1,"message":"93","line":2,"column":8,"nodeType":"94","messageId":"95","endLine":2,"endColumn":9},{"ruleId":"92","severity":1,"message":"96","line":3,"column":8,"nodeType":"94","messageId":"95","endLine":3,"endColumn":14},{"ruleId":"97","severity":1,"message":"98","line":15,"column":13,"nodeType":"99","endLine":15,"endColumn":46},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":47,"column":31,"nodeType":"106","messageId":"107","endLine":47,"endColumn":33},{"ruleId":"108","severity":1,"message":"109","line":61,"column":8,"nodeType":"110","endLine":61,"endColumn":10,"suggestions":"111"},{"ruleId":"92","severity":1,"message":"93","line":2,"column":8,"nodeType":"94","messageId":"95","endLine":2,"endColumn":9},{"ruleId":"92","severity":1,"message":"96","line":3,"column":8,"nodeType":"94","messageId":"95","endLine":3,"endColumn":14},{"ruleId":"100","replacedBy":"112"},{"ruleId":"102","replacedBy":"113"},{"ruleId":"108","severity":1,"message":"114","line":19,"column":13,"nodeType":"115","endLine":42,"endColumn":4},{"ruleId":"104","severity":1,"message":"116","line":23,"column":22,"nodeType":"106","messageId":"107","endLine":23,"endColumn":24},{"ruleId":"92","severity":1,"message":"117","line":4,"column":20,"nodeType":"94","messageId":"95","endLine":4,"endColumn":26},{"ruleId":"92","severity":1,"message":"118","line":6,"column":16,"nodeType":"94","messageId":"95","endLine":6,"endColumn":25},{"ruleId":"108","severity":1,"message":"119","line":33,"column":5,"nodeType":"110","endLine":33,"endColumn":7,"suggestions":"120"},{"ruleId":"121","severity":1,"message":"122","line":131,"column":10,"nodeType":"99","messageId":"123","endLine":131,"endColumn":129,"fix":"124"},{"ruleId":"92","severity":1,"message":"117","line":2,"column":20,"nodeType":"94","messageId":"95","endLine":2,"endColumn":26},{"ruleId":"92","severity":1,"message":"125","line":2,"column":28,"nodeType":"94","messageId":"95","endLine":2,"endColumn":37},{"ruleId":"92","severity":1,"message":"118","line":4,"column":16,"nodeType":"94","messageId":"95","endLine":4,"endColumn":25},{"ruleId":"92","severity":1,"message":"126","line":14,"column":9,"nodeType":"94","messageId":"95","endLine":14,"endColumn":13},{"ruleId":"92","severity":1,"message":"93","line":1,"column":8,"nodeType":"94","messageId":"95","endLine":1,"endColumn":9},{"ruleId":"127","severity":1,"message":"128","line":80,"column":60,"nodeType":"129","messageId":"130","endLine":80,"endColumn":61,"suggestions":"131"},{"ruleId":"127","severity":1,"message":"132","line":80,"column":63,"nodeType":"129","messageId":"130","endLine":80,"endColumn":64,"suggestions":"133"},"no-unused-vars","'$' is defined but never used.","Identifier","unusedVar","'Popper' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-native-reassign",["134"],"no-negated-in-lhs",["135"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'tweets.length'. Either include it or remove the dependency array.","ArrayExpression",["136"],["134"],["135"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","Expected '!==' and instead saw '!='.","'useRef' is defined but never used.","'FormGroup' is defined but never used.","React Hook useEffect has a missing dependency: 'recentSearches'. Either include it or remove the dependency array.",["137"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","noTargetBlank",{"range":"138","text":"139"},"'useEffect' is defined but never used.","'urls' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\,.","Literal","unnecessaryEscape",["140","141"],"Unnecessary escape character: \\!.",["142","143"],"no-global-assign","no-unsafe-negation",{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},[4956,4956]," rel=\"noreferrer\"",{"messageId":"148","fix":"149","desc":"150"},{"messageId":"151","fix":"152","desc":"153"},{"messageId":"148","fix":"154","desc":"150"},{"messageId":"151","fix":"155","desc":"153"},"Update the dependencies array to be: [tweets.length]",{"range":"156","text":"157"},"Update the dependencies array to be: [recentSearches]",{"range":"158","text":"159"},"removeEscape",{"range":"160","text":"161"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"162","text":"163"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"164","text":"161"},{"range":"165","text":"163"},[2108,2110],"[tweets.length]",[1668,1670],"[recentSearches]",[2076,2077],"",[2076,2076],"\\",[2079,2080],[2079,2079]]