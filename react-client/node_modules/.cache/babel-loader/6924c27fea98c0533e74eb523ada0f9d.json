{"ast":null,"code":"var _jsxFileName = \"E:\\\\Documents\\\\Side Projects\\\\tweet-app-git\\\\react-client\\\\src\\\\pages\\\\HomePage\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport useTweets from \"../../utils/useTweets\";\nimport Expire from \"../../utils/expire\";\nimport { useState, useRef, useEffect } from \"react\";\nimport axios from 'axios'; //to make api calls\n\nimport { Form, FormGroup, Button } from \"react-bootstrap\";\nimport '../../App.css'; //css stylesheet\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const HomePage = () => {\n  _s();\n\n  const [rules, setRules] = useState(\"\"); //state var to set the rules for tweet stream\n\n  const [recentSearches, setRecentSearches] = useState([]); //state array to hold recently searched rules -> retrieved from mongoDB\n\n  const tweets = useTweets(); // useTweets() is a hook that will update the 'tweets' array with new tweets as soon as it is received from the socket\n  //similar to componentDidMount and componentDidUpdate -> run at mounted/first render + all subsequent updates (only updates at mounted if pass in [] as parameter) \n  //when calling setState inside useEffect, make sure to pass in [] as 2nd param, else there will be an infinite loop (setState causes rerender -> call useEffect -> repeat)\n\n  useEffect(() => {\n    //GET request to get stored recent searches\n    axios.get(\"/getRecentSearches\").then(response => {\n      console.log(response.data); //need to format the response.data, as it is an array of obj, not array of value strings\n\n      let formattedRecentSearches = response.data.map(item => {\n        return item['value'];\n      });\n      console.log(formattedRecentSearches);\n      setRecentSearches(formattedRecentSearches);\n    }).catch(err => {\n      console.log(err); //err.message\n    });\n    console.log(\"recentSearches: \" + recentSearches);\n  }, []); //function to handle form submission event -> send post request to backend\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    alert(`Submitting Rule: ${rules}`); //send rule to backend -> start tweet stream\n\n    axios.post(\"/\", {\n      rules: rules\n    }).then().catch(err => {\n      console.log(\"error\");\n    }); // update the current recentSearches state arr \n\n    setRecentSearches(prevArray => [...prevArray, rules]);\n    console.log(rules);\n    console.log(recentSearches); //TODO: only update if unique?\n    //TODO: instead of recentSearches being an array of strings, make it an array of obj {id, value}\n    //POST request to update the mongoDB for recent searches\n\n    axios.post(\"/addRecentSearch\", {\n      value: rules\n    }).then(response => {\n      console.log(response.data); // update the current recentSearches state arr \n\n      setRecentSearches(prevArray => [...prevArray, rules]);\n      console.log(rules);\n      console.log(recentSearches);\n    }).catch(err => {\n      console.log(\"error\");\n    });\n  }; //function to delete selected recent search\n\n\n  const deleteRecentSearch = e => {\n    console.log(tweets);\n    e.preventDefault();\n    console.log(\"deleteRecentSearch\");\n    console.log(e.target.value);\n    axios.post(\"/deleteRecentSearch\", {\n      value: e.target.value\n    }).then(response => {\n      console.log(response.data); //remove from recentSearches state array too\n\n      setRecentSearches(recentSearches.filter(item => item !== e.target.value));\n    }).catch(err => {\n      console.log(\"error\");\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        class: \"rules-form\",\n        onSubmit: handleSubmit,\n        children: [\"  \", /*#__PURE__*/_jsxDEV(\"h1\", {\n          class: \"display-6\",\n          children: \"Real-Time Twitter Stream\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Keyword\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            value: rules,\n            onChange: e => setRules(e.target.value),\n            placeholder: \"Enter keyword to search for\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        class: \"mb-3\",\n        children: \"Recent Searches:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"recentContainer\",\n        children: recentSearches.map((obj, index) =>\n        /*#__PURE__*/\n        // <p key={obj} class=\"recentTag\">{obj}</p>\n        _jsxDEV(\"button\", {\n          onClick: deleteRecentSearch,\n          value: obj,\n          class: \"recentTag\",\n          children: obj\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"tweetStream\",\n        children: tweets.map(tweet => /*#__PURE__*/_jsxDEV(Expire, {\n          delay: \"1000000\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"card my-4\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"card-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                class: \"card-title\",\n                children: tweet.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                class: \"card-subtitle mb-2 text-muted\",\n                children: [tweet.sentiment.sentiment, \": \", tweet.sentiment.score]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                class: \"card-subtitle mb-2 text-muted\",\n                children: tweet.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                class: \"btn btn-primary mt-3\",\n                href: \"https://twitter.com/\" + tweet.username + \"/status/\" + tweet.id,\n                target: \"_blank\",\n                children: \"Go To Tweet\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 10\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 7\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 3\n  }, this);\n};\n\n_s(HomePage, \"PRDpmtf9I2dHohJFTgx0tJJ8/dw=\", false, function () {\n  return [useTweets];\n});\n\n_c = HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["E:/Documents/Side Projects/tweet-app-git/react-client/src/pages/HomePage/index.jsx"],"names":["React","useTweets","Expire","useState","useRef","useEffect","axios","Form","FormGroup","Button","HomePage","rules","setRules","recentSearches","setRecentSearches","tweets","get","then","response","console","log","data","formattedRecentSearches","map","item","catch","err","handleSubmit","evt","preventDefault","alert","post","prevArray","value","deleteRecentSearch","e","target","filter","obj","index","tweet","text","sentiment","score","username","id"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport useTweets from \"../../utils/useTweets\"\r\nimport Expire from \"../../utils/expire\"\r\nimport { useState, useRef, useEffect } from \"react\";\r\nimport axios from 'axios'; //to make api calls\r\nimport { Form, FormGroup, Button } from \"react-bootstrap\"\r\nimport '../../App.css' //css stylesheet\r\n\r\nexport const HomePage = () => {\r\n\tconst [rules, setRules] = useState(\"\"); //state var to set the rules for tweet stream\r\n\tconst [recentSearches, setRecentSearches] = useState([]); //state array to hold recently searched rules -> retrieved from mongoDB\r\n\tconst tweets = useTweets() // useTweets() is a hook that will update the 'tweets' array with new tweets as soon as it is received from the socket\r\n\r\n\t//similar to componentDidMount and componentDidUpdate -> run at mounted/first render + all subsequent updates (only updates at mounted if pass in [] as parameter) \r\n  //when calling setState inside useEffect, make sure to pass in [] as 2nd param, else there will be an infinite loop (setState causes rerender -> call useEffect -> repeat)\r\n\tuseEffect(() => {\r\n    //GET request to get stored recent searches\r\n    axios.get(\"/getRecentSearches\")\r\n    .then((response) => {\r\n      console.log(response.data);\r\n      //need to format the response.data, as it is an array of obj, not array of value strings\r\n      let formattedRecentSearches = response.data.map((item) => {\r\n        return item['value'];\r\n      })\r\n      console.log(formattedRecentSearches);\r\n      setRecentSearches(formattedRecentSearches);\r\n    })\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err); //err.message\r\n\t\t});\r\n    \r\n    console.log(\"recentSearches: \" + recentSearches);\r\n\t}, []);\r\n\r\n\t//function to handle form submission event -> send post request to backend\r\n\tconst handleSubmit = (evt) => {\r\n\t\tevt.preventDefault();\r\n\t\talert(`Submitting Rule: ${rules}`)\r\n    \r\n    //send rule to backend -> start tweet stream\r\n\t\taxios.post(\"/\", {\r\n\t\t\trules: rules\r\n\t\t}).then()\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(\"error\");\r\n\t\t});\r\n\r\n    // update the current recentSearches state arr \r\n    setRecentSearches(prevArray => [...prevArray, rules]);\r\n    console.log(rules);\r\n    console.log(recentSearches);\r\n\r\n    //TODO: only update if unique?\r\n    //TODO: instead of recentSearches being an array of strings, make it an array of obj {id, value}\r\n\r\n    //POST request to update the mongoDB for recent searches\r\n    axios.post(\"/addRecentSearch\", {\r\n\t\t\tvalue: rules\r\n\t\t})\r\n    .then((response) => {\r\n      console.log(response.data);\r\n\r\n      // update the current recentSearches state arr \r\n      setRecentSearches(prevArray => [...prevArray, rules]);\r\n      console.log(rules);\r\n      console.log(recentSearches);\r\n    })\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(\"error\");\r\n\t\t});\r\n\t}\r\n\r\n  //function to delete selected recent search\r\n  const deleteRecentSearch = (e) => {\r\n\r\n    console.log(tweets);\r\n\r\n    e.preventDefault();\r\n    console.log(\"deleteRecentSearch\")\r\n    console.log(e.target.value);\r\n\r\n    axios.post(\"/deleteRecentSearch\", {\r\n\t\t\tvalue: e.target.value\r\n\t\t})\r\n    .then((response) => {\r\n      console.log(response.data);\r\n\r\n      //remove from recentSearches state array too\r\n      setRecentSearches(recentSearches.filter(item => item !== e.target.value))\r\n    })\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(\"error\");\r\n\t\t});\r\n\r\n  }\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div class=\"container\">\r\n\t\t\t\t{/* form for user inputted rule -> sent to backend API*/}\r\n\t\t\t\t<form class=\"rules-form\" onSubmit={handleSubmit}>  {/* when onSubmit event happens, call the handleSubmit function */}\r\n\t\t\t\t\t<h1 class=\"display-6\">Real-Time Twitter Stream</h1>\r\n\t\t\t\t\t<Form.Group className=\"mb-3\">\r\n\t\t\t\t\t\t<Form.Label>Keyword</Form.Label>\r\n\t\t\t\t\t\t<Form.Control value={rules} onChange={e => setRules(e.target.value)} placeholder=\"Enter keyword to search for\" />\r\n\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t<Button variant=\"primary\" type=\"submit\">\r\n\t\t\t\t\t\tSubmit\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</form>\r\n\r\n        {/* display recently searched */}\r\n        <h5 class=\"mb-3\">Recent Searches:</h5>\r\n        <div class=\"recentContainer\">\r\n          {recentSearches.map((obj, index) => (\r\n            // <p key={obj} class=\"recentTag\">{obj}</p>\r\n            <button onClick={deleteRecentSearch} value={obj} key={index} class=\"recentTag\">{obj}</button>\r\n          ))}\r\n        </div>\r\n\r\n\t\t\t\t{/* print out list of tweets in real-time as they are updated by useTweets hook */}\r\n\t\t\t\t<div id=\"tweetStream\">\r\n\t\t\t\t\t{tweets.map((tweet) => (\r\n\t\t\t\t\t\t<Expire delay=\"1000000\"> {/* tweets disappear after 5 seconds */}\r\n\t\t\t\t\t\t\t<div class=\"card my-4\">\r\n\t\t\t\t\t\t\t\t<div class=\"card-body\">\r\n\t\t\t\t\t\t\t\t\t<h5 class=\"card-title\">{tweet.text}</h5>\r\n                  <h6 class=\"card-subtitle mb-2 text-muted\">{tweet.sentiment.sentiment}: {tweet.sentiment.score}</h6>\r\n\t\t\t\t\t\t\t\t\t<h6 class=\"card-subtitle mb-2 text-muted\">{tweet.username}</h6>\r\n\r\n\t\t\t\t\t\t\t\t\t<a class=\"btn btn-primary mt-3\" href={\"https://twitter.com/\" + tweet.username + \"/status/\" + tweet.id} target=\"_blank\">\r\n\t\t\t\t\t\t\t\t\t\tGo To Tweet\r\n\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</Expire>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}