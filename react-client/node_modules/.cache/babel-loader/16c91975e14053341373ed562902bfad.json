{"ast":null,"code":"const tf = require('@tensorflow/tfjs');\n\nlet model, metadata; //urls for pre-trained sentiment model\n\nconst urls = {\n  model: 'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/model.json',\n  metadata: 'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/metadata.json'\n}; //1) LOAD SENTIMENT MODEL\n\nasync function loadModel(url) {\n  try {\n    const model = await tf.loadLayersModel(url);\n    console.log(\"YEEHAW\");\n    return model;\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nasync function loadMetadata(url) {\n  try {\n    const metadataJson = await fetch(url);\n    const metadata = await metadataJson.json();\n    return metadata;\n  } catch (err) {\n    console.log(err);\n  }\n} //2) PERFORM SENTIMENT ANALYSIS ON EACH TWEET\n//takes in array of tweets, gets sentiment score, determine if positive, neutral, or negative\n\n\nfunction processTwitterData(tweets) {\n  setupSentimentModel().then(result => {\n    const twitterData = [];\n    $.each(tweets, function (index, tweet) {\n      const tweet_text = tweet.full_text.replace(/(?:https?|ftp):\\/\\/[\\n\\S]+/g, '');\n      const sentiment_score = getSentimentScore(tweet_text);\n      let tweet_sentiment = '';\n\n      if (sentiment_score > SentimentThreshold.Positive) {\n        tweet_sentiment = 'positive';\n      } else if (sentiment_score > SentimentThreshold.Neutral) {\n        tweet_sentiment = 'neutral';\n      } else if (sentiment_score >= SentimentThreshold.Negative) {\n        tweet_sentiment = 'negative';\n      }\n\n      twitterData.push({\n        sentiment: tweet_sentiment,\n        score: sentiment_score.toFixed(4),\n        tweet: tweet_text\n      });\n    });\n    console.log(twitterData); // $('.spinner-border').addClass('d-none');\n    // displayTweets(twitterData.filter(t => t.sentiment == 'positive'), 'positive');\n    // displayTweets(twitterData.filter(t => t.sentiment == 'neutral'), 'neutral');\n    // displayTweets(twitterData.filter(t => t.sentiment == 'negative'), 'negative');\n    // $('#tweet-list').removeClass('d-none');\n    // displayPieChart(twitterData);\n  });\n} //gets the sentiment score of a single tweet using model.predict()\n\n\nfunction getSentimentScore(text) {\n  const inputText = text.trim().toLowerCase().replace(/(\\.|\\,|\\!)/g, '').split(' '); // Convert the words to a sequence of word indices.\n\n  const sequence = inputText.map(word => {\n    let wordIndex = metadata.word_index[word] + metadata.index_from;\n\n    if (wordIndex > metadata.vocabulary_size) {\n      wordIndex = OOV_INDEX;\n    }\n\n    return wordIndex;\n  }); // Perform truncation and padding.\n\n  const paddedSequence = padSequences([sequence], metadata.max_len);\n  const input = tf.tensor2d(paddedSequence, [1, metadata.max_len]);\n  const predictOut = model.predict(input);\n  const score = predictOut.dataSync()[0];\n  predictOut.dispose();\n  return score;\n} //function to run the sentiment analysis\n\n\nfunction twitterSentiment(model_in, metadata_in, tweets) {\n  model = model_in;\n  metadata = metadata_in;\n  processTwitterData(tweets);\n} //export the functions as modules so that they can be reused by other parts of the code (i.e. in index.js)\n\n\nmodule.exports.loadModel = loadModel;\nmodule.exports.loadMetadata = loadMetadata;\nmodule.exports.processTwitterData = processTwitterData;\nmodule.exports.getSentimentScore = getSentimentScore;\nmodule.exports.twitterSentiment = twitterSentiment;","map":{"version":3,"sources":["E:/Documents/Side Projects/tweet-app-git/react-client/src/utils/sentimentAnalysis.js"],"names":["tf","require","model","metadata","urls","loadModel","url","loadLayersModel","console","log","err","loadMetadata","metadataJson","fetch","json","processTwitterData","tweets","setupSentimentModel","then","result","twitterData","$","each","index","tweet","tweet_text","full_text","replace","sentiment_score","getSentimentScore","tweet_sentiment","SentimentThreshold","Positive","Neutral","Negative","push","sentiment","score","toFixed","text","inputText","trim","toLowerCase","split","sequence","map","word","wordIndex","word_index","index_from","vocabulary_size","OOV_INDEX","paddedSequence","padSequences","max_len","input","tensor2d","predictOut","predict","dataSync","dispose","twitterSentiment","model_in","metadata_in","module","exports"],"mappings":"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","sourcesContent":["const tf = require('@tensorflow/tfjs');\r\n\r\nlet model, metadata;\r\n\r\n//urls for pre-trained sentiment model\r\nconst urls = {\r\n    model: 'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/model.json',\r\n    metadata: 'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/metadata.json'\r\n};\r\n\r\n//1) LOAD SENTIMENT MODEL\r\nasync function loadModel(url) {\r\n    try {\r\n        const model = await tf.loadLayersModel(url);\r\n        console.log(\"YEEHAW\");\r\n        return model;\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}\r\n \r\nasync function loadMetadata(url) {\r\n    try {\r\n        const metadataJson = await fetch(url);\r\n        const metadata = await metadataJson.json();\r\n        return metadata;\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}\r\n\r\n//2) PERFORM SENTIMENT ANALYSIS ON EACH TWEET\r\n//takes in array of tweets, gets sentiment score, determine if positive, neutral, or negative\r\nfunction processTwitterData(tweets){\r\n    setupSentimentModel().then(\r\n        result => {\r\n            const twitterData = [];\r\n            $.each(tweets, function( index, tweet ) {\r\n                const tweet_text = tweet.full_text.replace(/(?:https?|ftp):\\/\\/[\\n\\S]+/g, '');\r\n                const sentiment_score = getSentimentScore(tweet_text);\r\n                let tweet_sentiment = '';\r\n                if(sentiment_score > SentimentThreshold.Positive){\r\n                    tweet_sentiment = 'positive'\r\n                }else if(sentiment_score > SentimentThreshold.Neutral){\r\n                    tweet_sentiment = 'neutral'\r\n                }else if(sentiment_score >= SentimentThreshold.Negative){\r\n                    tweet_sentiment = 'negative'\r\n                }\r\n                twitterData.push({\r\n                    sentiment: tweet_sentiment,\r\n                    score: sentiment_score.toFixed(4),\r\n                    tweet: tweet_text\r\n                });\r\n            });\r\n            console.log(twitterData);\r\n            // $('.spinner-border').addClass('d-none');\r\n            // displayTweets(twitterData.filter(t => t.sentiment == 'positive'), 'positive');\r\n            // displayTweets(twitterData.filter(t => t.sentiment == 'neutral'), 'neutral');\r\n            // displayTweets(twitterData.filter(t => t.sentiment == 'negative'), 'negative');\r\n            // $('#tweet-list').removeClass('d-none');\r\n            // displayPieChart(twitterData);\r\n        }\r\n    )   \r\n}\r\n\r\n//gets the sentiment score of a single tweet using model.predict()\r\nfunction getSentimentScore(text) {\r\n    const inputText = text.trim().toLowerCase().replace(/(\\.|\\,|\\!)/g, '').split(' ');\r\n    // Convert the words to a sequence of word indices.\r\n    const sequence = inputText.map(word => {\r\n      let wordIndex = metadata.word_index[word] + metadata.index_from;\r\n      if (wordIndex > metadata.vocabulary_size) {\r\n        wordIndex = OOV_INDEX;\r\n      }\r\n      return wordIndex;\r\n    });\r\n    // Perform truncation and padding.\r\n    const paddedSequence = padSequences([sequence], metadata.max_len);\r\n    const input = tf.tensor2d(paddedSequence, [1, metadata.max_len]);\r\n \r\n    const predictOut = model.predict(input);\r\n    const score = predictOut.dataSync()[0];\r\n    predictOut.dispose();\r\n \r\n    return score;\r\n}\r\n\r\n//function to run the sentiment analysis\r\nfunction twitterSentiment(model_in, metadata_in, tweets) {\r\n    model = model_in;\r\n    metadata = metadata_in;\r\n\r\n    processTwitterData(tweets);\r\n}\r\n\r\n//export the functions as modules so that they can be reused by other parts of the code (i.e. in index.js)\r\nmodule.exports.loadModel = loadModel;\r\nmodule.exports.loadMetadata = loadMetadata;\r\nmodule.exports.processTwitterData = processTwitterData;\r\nmodule.exports.getSentimentScore = getSentimentScore;\r\nmodule.exports.twitterSentiment = twitterSentiment;"]},"metadata":{},"sourceType":"module"}