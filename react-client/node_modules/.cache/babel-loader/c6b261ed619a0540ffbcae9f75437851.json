{"ast":null,"code":"var _jsxFileName = \"E:\\\\Documents\\\\Side Projects\\\\tweet-app-git\\\\react-client\\\\src\\\\pages\\\\SentimentPage\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useRef, useEffect } from \"react\";\nimport axios from 'axios'; //to make api calls\n\nimport { Form, FormGroup, Button } from \"react-bootstrap\";\nimport '../../App.css';\nimport { tweetSentiment } from '../../utils/sentimentAnalysis';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SentimentPage = () => {\n  _s();\n\n  const [query, setQuery] = useState(\"\"); //state var to hold user inputted query to send to backend\n\n  const [tweets, setTweets] = useState([]); //state array to hold 20 tweets returned by post request\n\n  const [twitterData, setTwitterData] = useState([]); //state array to hold sentiment analysis data on 20 tweets\n  //urls for pre-trained sentiment model\n\n  const urls = {\n    model: 'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/model.json',\n    metadata: 'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/metadata.json'\n  }; //function to handle form submission event -> send post request to backend\n\n  const handleSubmit = async evt => {\n    evt.preventDefault();\n    alert(`Submitting Query: ${query}`); //THIS IS A PROMISE. THE AXIOS.POST OR GET RETURNS A PROMISE, THEN .THEN() HAS THE CALLBACK FUNCTION TO RUN, AND .CATCH IS FOR ERRORS\n\n    axios.post('/sentiment', {\n      query: query\n    }) //response is array of tweets from Twitter API\n    .then(async function (response) {\n      //https://stackoverflow.com/questions/54069253/usestate-set-method-not-reflecting-change-immediately **interesting issue...\n      console.log(response.data); //*this will update tweets for the NEXT RENDER, state values are used by functions based on their CURRENT CLOSURES, state updates will reflect in the next re-render*/\n\n      setTweets(response.data); //set tweets state var to the arr of 20 tweets returned by this request\n\n      console.log(tweets);\n      /* NOTE THAT THE ABOVE TWO CONSOLE.LOGS ARE DIFFERENT, tweets is updated on the NEXT render */\n\n      /* so in order for the twitter sentiment function to work properly (instead of being one render behind, i.e. the first time the array is empty, second time is the first array, ...) */\n\n      /* so, pass in response.data to twitterSentiment instead of tweets*/\n\n      const twitter_data = [];\n      await response.data.forEach(async (tweet, i) => {\n        let tweet_data = await tweetSentiment(tweet);\n        twitter_data.push(tweet_data);\n      });\n      console.log(twitter_data);\n      setTwitterData(...twitter_data); // let twitter_data = await twitterSentiment(response.data);\n      // console.log(twitter_data);\n      // setTwitterData(twitter_data);\n    }).catch(function (err) {\n      console.log(\"error\");\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        class: \"rules-form\",\n        onSubmit: handleSubmit,\n        children: [\"  \", /*#__PURE__*/_jsxDEV(\"h1\", {\n          class: \"display-6\",\n          children: \"Sentiment Analysis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Keyword\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            value: query,\n            onChange: e => setQuery(e.target.value),\n            placeholder: \"Enter hashtag\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"tweetStream\",\n        children: twitterData.map(tweet => /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"card my-4\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"card-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              class: \"card-title\",\n              children: tweet.tweet\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n              class: \"card-subtitle mb-2 text-muted\",\n              children: [tweet.sentiment, \": \", tweet.score]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SentimentPage, \"Kv1SW6Kf4Y0PrKL4Un07XeRVs8o=\");\n\n_c = SentimentPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SentimentPage\");","map":{"version":3,"sources":["E:/Documents/Side Projects/tweet-app-git/react-client/src/pages/SentimentPage/index.jsx"],"names":["React","useState","useRef","useEffect","axios","Form","FormGroup","Button","tweetSentiment","SentimentPage","query","setQuery","tweets","setTweets","twitterData","setTwitterData","urls","model","metadata","handleSubmit","evt","preventDefault","alert","post","then","response","console","log","data","twitter_data","forEach","tweet","i","tweet_data","push","catch","err","e","target","value","map","sentiment","score"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { useState, useRef, useEffect } from \"react\";\r\nimport axios from 'axios'; //to make api calls\r\nimport { Form, FormGroup, Button } from \"react-bootstrap\"\r\nimport '../../App.css'\r\nimport {tweetSentiment} from '../../utils/sentimentAnalysis'\r\n\r\nexport const SentimentPage = () => {\r\n  const [query, setQuery] = useState(\"\"); //state var to hold user inputted query to send to backend\r\n  const [tweets, setTweets] = useState([]); //state array to hold 20 tweets returned by post request\r\n  const [twitterData, setTwitterData] = useState([]); //state array to hold sentiment analysis data on 20 tweets\r\n      \r\n  //urls for pre-trained sentiment model\r\n  const urls = {\r\n    model: 'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/model.json',\r\n    metadata: 'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/metadata.json'\r\n  };\r\n\r\n  //function to handle form submission event -> send post request to backend\r\n\tconst handleSubmit = async (evt) => {\r\n    evt.preventDefault();\r\n\t\talert(`Submitting Query: ${query}`)\r\n    \r\n    //THIS IS A PROMISE. THE AXIOS.POST OR GET RETURNS A PROMISE, THEN .THEN() HAS THE CALLBACK FUNCTION TO RUN, AND .CATCH IS FOR ERRORS\r\n\t\taxios.post('/sentiment', {\r\n\t\t\tquery: query\r\n\t\t})\r\n    //response is array of tweets from Twitter API\r\n    .then(async function(response){\r\n      //https://stackoverflow.com/questions/54069253/usestate-set-method-not-reflecting-change-immediately **interesting issue...\r\n      console.log(response.data);\r\n      //*this will update tweets for the NEXT RENDER, state values are used by functions based on their CURRENT CLOSURES, state updates will reflect in the next re-render*/\r\n      setTweets(response.data); //set tweets state var to the arr of 20 tweets returned by this request\r\n      console.log(tweets);\r\n\r\n      /* NOTE THAT THE ABOVE TWO CONSOLE.LOGS ARE DIFFERENT, tweets is updated on the NEXT render */\r\n      /* so in order for the twitter sentiment function to work properly (instead of being one render behind, i.e. the first time the array is empty, second time is the first array, ...) */\r\n      /* so, pass in response.data to twitterSentiment instead of tweets*/\r\n\r\n      const twitter_data = [];\r\n      await response.data.forEach(async (tweet, i) => {\r\n        let tweet_data = await tweetSentiment(tweet);\r\n        twitter_data.push(tweet_data);\r\n      });\r\n      \r\n      console.log(twitter_data);\r\n      setTwitterData(...twitter_data);\r\n\r\n      // let twitter_data = await twitterSentiment(response.data);\r\n      // console.log(twitter_data);\r\n      // setTwitterData(twitter_data);\r\n    })\r\n    .catch(function(err){\r\n\t\t\tconsole.log(\"error\");\r\n\t\t});\r\n\t}\r\n\r\n  return (\r\n    <div>\r\n      <div class=\"container\">\r\n        {/* form for user inputted hashtag -> do sentiment analysis on this tag*/}\r\n\t\t\t\t<form class=\"rules-form\" onSubmit={handleSubmit}>  {/* when onSubmit event happens, call the handleSubmit function */}\r\n          <h1 class=\"display-6\">Sentiment Analysis</h1>\r\n\t\t\t\t\t<Form.Group className=\"mb-3\">\r\n\t\t\t\t\t\t<Form.Label>Keyword</Form.Label>\r\n\t\t\t\t\t\t<Form.Control value={query} onChange={e => setQuery(e.target.value)} placeholder=\"Enter hashtag\" />\r\n\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t<Button variant=\"primary\" type=\"submit\">\r\n\t\t\t\t\t\tSubmit\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</form>\r\n\r\n\r\n        {/* print out list of tweets in real-time as they are updated by useTweets hook */}\r\n\t\t\t\t{/* <div id=\"tweetStream\">\r\n\t\t\t\t\t{tweets.map((tweet) => (\r\n            <div class=\"card my-4\">\r\n              <div class=\"card-body\">\r\n                <h5 class=\"card-title\">{tweet.text}</h5>\r\n              </div>\r\n            </div>\r\n\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div> */}\r\n        <div id=\"tweetStream\">\r\n\t\t\t\t\t{twitterData.map((tweet) => (\r\n            <div class=\"card my-4\">\r\n              <div class=\"card-body\">\r\n                <h5 class=\"card-title\">{tweet.tweet}</h5>\r\n\t\t\t\t\t\t\t\t<h6 class=\"card-subtitle mb-2 text-muted\">{tweet.sentiment}: {tweet.score}</h6>\r\n\r\n              </div>\r\n            </div>\r\n\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}