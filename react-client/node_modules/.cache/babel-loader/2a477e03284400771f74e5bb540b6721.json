{"ast":null,"code":"var _s = $RefreshSig$();\n\n//a custom hook that creates the socket.io-client, exposes a tweet object\n//, and whenever a new tweet is received - will add to the array of all tweets\nimport { useState, useEffect } from \"react\";\nimport { io } from \"socket.io-client\";\nconst ENDPOINT = \"http://localhost:4001/\";\n\nfunction useTweets() {\n  _s();\n\n  //received tweets from server -> is an array\n  const [tweets, setTweets] = useState([]); //create WebSocket connection with server\n  // const socket = io(ENDPOINT , {\n  //     withCredentials: true,\n  //     extraHeaders: {\n  //         \"my-custom-header\": \"abcd\"\n  //     }\n  // });\n\n  const socket = io(ENDPOINT); //handle tweet events\n\n  useEffect(() => {\n    // socket.on('error', function (err) { \n    //     console.log(\"Socket.IO Error\"); \n    //     console.log(err.stack); \n    //  });\n    socket.on(\"tweet\", tweet => {\n      console.log(tweet); //object that represents the tweet data to display\n\n      const newTweet = {\n        id: tweet.data.id,\n        text: tweet.data.text,\n        username: `@${tweet.includes.users[0].username}`\n      }; //add new tweet to array of tweets -> return this array\n\n      setTweets(tweets => [...tweets, newTweet]);\n    }); //return () => socket.disconnect();\n  }, []);\n  return tweets;\n}\n\n_s(useTweets, \"tlPhWtKxaAnAviYMgoNvFaAwXFo=\");\n\nexport default useTweets;","map":{"version":3,"sources":["E:/Documents/Side Projects/tweet-app/react-client/src/utils/useTweets.js"],"names":["useState","useEffect","io","ENDPOINT","useTweets","tweets","setTweets","socket","on","tweet","console","log","newTweet","id","data","text","username","includes","users"],"mappings":";;AAAA;AACA;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAAQC,EAAR,QAAiB,kBAAjB;AACA,MAAMC,QAAQ,GAAG,wBAAjB;;AAEA,SAASC,SAAT,GAAqB;AAAA;;AACjB;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC,CAFiB,CAIjB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAMO,MAAM,GAAGL,EAAE,CAACC,QAAD,CAAjB,CAXiB,CAajB;;AACAF,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA;AACA;AACA;AAEAM,IAAAA,MAAM,CAACC,EAAP,CAAU,OAAV,EAAoBC,KAAD,IAAW;AAC1BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAD0B,CAG1B;;AACA,YAAMG,QAAQ,GAAG;AACbC,QAAAA,EAAE,EAAGJ,KAAK,CAACK,IAAN,CAAWD,EADH;AAEbE,QAAAA,IAAI,EAAGN,KAAK,CAACK,IAAN,CAAWC,IAFL;AAGbC,QAAAA,QAAQ,EAAI,IAAGP,KAAK,CAACQ,QAAN,CAAeC,KAAf,CAAqB,CAArB,EAAwBF,QAAS;AAHnC,OAAjB,CAJ0B,CAU1B;;AACAV,MAAAA,SAAS,CAAED,MAAD,IAAY,CAAC,GAAGA,MAAJ,EAAYO,QAAZ,CAAb,CAAT;AACH,KAZD,EANY,CAqBZ;AACH,GAtBQ,EAsBN,EAtBM,CAAT;AAwBA,SAAOP,MAAP;AACH;;GAvCQD,S;;AAyCT,eAAeA,SAAf","sourcesContent":["//a custom hook that creates the socket.io-client, exposes a tweet object\r\n//, and whenever a new tweet is received - will add to the array of all tweets\r\nimport { useState, useEffect } from \"react\";\r\nimport {io} from \"socket.io-client\";\r\nconst ENDPOINT = \"http://localhost:4001/\";\r\n\r\nfunction useTweets() {\r\n    //received tweets from server -> is an array\r\n    const [tweets, setTweets] = useState([]);\r\n\r\n    //create WebSocket connection with server\r\n    // const socket = io(ENDPOINT , {\r\n    //     withCredentials: true,\r\n    //     extraHeaders: {\r\n    //         \"my-custom-header\": \"abcd\"\r\n    //     }\r\n    // });\r\n    const socket = io(ENDPOINT)\r\n\r\n    //handle tweet events\r\n    useEffect(() => {\r\n        // socket.on('error', function (err) { \r\n        //     console.log(\"Socket.IO Error\"); \r\n        //     console.log(err.stack); \r\n        //  });\r\n\r\n        socket.on(\"tweet\", (tweet) => {\r\n            console.log(tweet)\r\n\r\n            //object that represents the tweet data to display\r\n            const newTweet = {\r\n                id : tweet.data.id,\r\n                text : tweet.data.text,\r\n                username : `@${tweet.includes.users[0].username}`\r\n            }\r\n\r\n            //add new tweet to array of tweets -> return this array\r\n            setTweets((tweets) => [...tweets, newTweet]);\r\n        });\r\n\r\n        \r\n        //return () => socket.disconnect();\r\n    }, []);\r\n\r\n    return tweets;\r\n}\r\n\r\nexport default useTweets;\r\n\r\n"]},"metadata":{},"sourceType":"module"}